{"version":3,"sources":["components/Changer/BaseCurrencyInput.js","components/Changer/Rates.js","components/Changer/QuotedCurrencyInput.js","components/Changer/index.js","App.js","serviceWorker.js","index.js"],"names":["BaseCurrencyInput","_ref","handlebaseCurrency","handleInputbaseCurrency","choosedCurrency","value","react_default","a","createElement","className","onClick","id","onChange","type","Rates","baseCurrency","quoteCurrency","currencies","concat","toFixed","QuotedCurrencyInput","handlequoteCurrency","handleInputquoteCurrency","Changer","state","loading","modalIsOpen","baseCurrencyValue","quoteCurrencyValue","intervalID","openModal","_this","loadData","setInterval","bind","Object","assertThisInitialized","setState","closeModal","clearInterval","_callee","fetchUSD","fetchEUR","fetchRUB","USD","EUR","RUB","regenerator_default","wrap","_context","prev","next","fetch","sent","json","rates","stop","e","target","reverseCurrencies","_this$state","result","_this$state2","_this$state3","b","_this$state4","this","Fragment","lib_default","isOpen","ariaHideApp","overlayClassName","BaseCurrencyInput_BaseCurrencyInput","QuotedCurrencyInput_QuotedCurrencyInput","Rates_Rates","Component","App","components_Changer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33d8ebba.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const BaseCurrencyInput = ({\n  handlebaseCurrency,\n  handleInputbaseCurrency,\n  choosedCurrency,\n  value\n}) => (\n  <div className=\"currency-input\">\n    <div>У меня есть</div>\n    <div className=\"currency-input__buttons-group\">\n      <button\n        onClick={handlebaseCurrency}\n        id=\"RUB\"\n        className={choosedCurrency === \"RUB\" ? \"active\" : \"\"}\n      >\n        RUB\n      </button>\n      <button\n        onClick={handlebaseCurrency}\n        id=\"USD\"\n        className={choosedCurrency === \"USD\" ? \"active\" : \"\"}\n      >\n        USD\n      </button>\n      <button\n        onClick={handlebaseCurrency}\n        id=\"EUR\"\n        className={choosedCurrency === \"EUR\" ? \"active\" : \"\"}\n      >\n        EUR\n      </button>\n    </div>\n    <input onChange={handleInputbaseCurrency} value={value} type=\"number\" />\n  </div>\n);\n","import React from \"react\";\n\nexport const Rates = ({ baseCurrency, quoteCurrency, currencies }) => (\n  <div>\n    Курсы обмена:\n    <p>\n      {`1 ${baseCurrency} = ${currencies[baseCurrency][quoteCurrency].toFixed(\n        2\n      )} ${quoteCurrency}`}\n    </p>\n    <p>\n      {`1 ${quoteCurrency} = ${currencies[quoteCurrency][baseCurrency].toFixed(\n        2\n      )} ${baseCurrency}`}\n    </p>\n  </div>\n);\n","import React from \"react\";\n\nexport const QuotedCurrencyInput = ({\n  handlequoteCurrency,\n  choosedCurrency,\n  handleInputquoteCurrency,\n  value\n}) => (\n  <div className=\"currency-input\">\n    <div>Хочу приобрести</div>\n    <div className=\"currency-input__buttons-group\">\n      <button\n        onClick={handlequoteCurrency}\n        id=\"RUB\"\n        className={choosedCurrency === \"RUB\" ? \"active\" : \"\"}\n      >\n        RUB\n      </button>\n      <button\n        onClick={handlequoteCurrency}\n        id=\"USD\"\n        className={choosedCurrency === \"USD\" ? \"active\" : \"\"}\n      >\n        USD\n      </button>\n      <button\n        onClick={handlequoteCurrency}\n        id=\"EUR\"\n        className={choosedCurrency === \"EUR\" ? \"active\" : \"\"}\n      >\n        EUR\n      </button>\n    </div>\n    <input onChange={handleInputquoteCurrency} value={value} type=\"number\" />\n  </div>\n);\n","import React, { Component } from \"react\";\nimport Modal from \"react-modal\";\nimport \"./style.sass\";\nimport { BaseCurrencyInput } from \"./BaseCurrencyInput\";\nimport { Rates } from \"./Rates\";\nimport { QuotedCurrencyInput } from \"./QuotedCurrencyInput\";\n\nclass Changer extends Component {\n  state = {\n    loading: true,\n    modalIsOpen: false,\n    currencies: {},\n    baseCurrency: \"RUB\", // by default 'У меня есть'\n    quoteCurrency: \"EUR\", // by default 'Хочу приобрести'\n    baseCurrencyValue: \"\",\n    quoteCurrencyValue: \"\",\n    intervalID: \"\"\n  };\n\n  openModal = () => {\n    this.loadData();\n    const intervalID = setInterval(this.loadData.bind(this), 15000); // загрузка каждые 15 секунд\n    this.setState({ modalIsOpen: true, intervalID });\n  };\n\n  closeModal = () => {\n    this.setState({ modalIsOpen: false });\n    clearInterval(this.state.intervalID);\n  };\n\n  loadData = async () => {\n    const fetchUSD = await fetch(\n      \"https://api.exchangeratesapi.io/latest?base=USD&symbols=RUB,EUR\"\n    );\n    const fetchEUR = await fetch(\n      \"https://api.exchangeratesapi.io/latest?base=EUR&symbols=RUB,USD\"\n    );\n    const fetchRUB = await fetch(\n      \"https://api.exchangeratesapi.io/latest?base=RUB&symbols=USD,EUR\"\n    );\n    const USD = await fetchUSD.json();\n    const EUR = await fetchEUR.json();\n    const RUB = await fetchRUB.json();\n\n    this.setState({\n      currencies: { USD: USD.rates, EUR: EUR.rates, RUB: RUB.rates },\n      loading: false\n    });\n  };\n\n  handlebaseCurrency = e => {\n    const { id } = e.target;\n    if (id === this.state.quoteCurrency) {\n      this.reverseCurrencies();\n    }\n    this.setState({\n      baseCurrency: id,\n      baseCurrencyValue: \"\",\n      quoteCurrencyValue: \"\"\n    });\n  };\n\n  handlequoteCurrency = e => {\n    const { id } = e.target;\n    if (id === this.state.baseCurrency) {\n      this.reverseCurrencies();\n    }\n    this.setState({\n      quoteCurrency: id,\n      baseCurrencyValue: \"\",\n      quoteCurrencyValue: \"\"\n    });\n  };\n\n  handleInputbaseCurrency = e => {\n    const { baseCurrency, quoteCurrency, currencies } = this.state;\n    const { value } = e.target;\n    const rate = currencies[baseCurrency][quoteCurrency];\n    const result = (value * rate).toFixed(2);\n    this.setState({ baseCurrencyValue: value, quoteCurrencyValue: result });\n  };\n\n  handleInputquoteCurrency = e => {\n    const { baseCurrency, quoteCurrency, currencies } = this.state;\n    const { value } = e.target;\n    const rate = currencies[quoteCurrency][baseCurrency];\n    const result = (value * rate).toFixed(2);\n    this.setState({\n      quoteCurrencyValue: value,\n      baseCurrencyValue: result\n    });\n  };\n\n  reverseCurrencies = () => {\n    const { baseCurrency, quoteCurrency } = this.state;\n    const a = quoteCurrency;\n    const b = baseCurrency;\n    this.setState({\n      baseCurrency: a,\n      quoteCurrency: b,\n      baseCurrencyValue: \"\",\n      quoteCurrencyValue: \"\"\n    });\n  };\n\n  render() {\n    const {\n      baseCurrencyValue,\n      quoteCurrencyValue,\n      baseCurrency,\n      quoteCurrency,\n      currencies,\n      loading\n    } = this.state;\n\n    return (\n      <>\n        <button onClick={this.openModal}>Открыть обменник</button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          className=\"Modal\"\n          ariaHideApp={false}\n          overlayClassName=\"Overlay\"\n        >\n          <button className=\"Modal__close-btn\" onClick={this.closeModal}>\n            X\n          </button>\n          {!loading && (\n            <>\n              <BaseCurrencyInput\n                choosedCurrency={baseCurrency}\n                value={baseCurrencyValue}\n                handlebaseCurrency={this.handlebaseCurrency}\n                handleInputbaseCurrency={this.handleInputbaseCurrency}\n              />\n\n              <span\n                onClick={this.reverseCurrencies}\n                className=\"Modal__reverse-btn\"\n              >\n                &#8644;\n              </span>\n              <QuotedCurrencyInput\n                value={quoteCurrencyValue}\n                choosedCurrency={quoteCurrency}\n                handlequoteCurrency={this.handlequoteCurrency}\n                handleInputquoteCurrency={this.handleInputquoteCurrency}\n              />\n              <Rates\n                baseCurrency={baseCurrency}\n                quoteCurrency={quoteCurrency}\n                currencies={currencies}\n              />\n            </>\n          )}\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default Changer;\n","import React, { Component } from \"react\";\nimport Changer from \"./components/Changer/index\";\n\nclass App extends Component {\n  render() {\n    return <Changer />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}